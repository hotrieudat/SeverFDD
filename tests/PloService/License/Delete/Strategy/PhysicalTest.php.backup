<?php
/**
 * Created by PhpStorm.
 * User: t-kimura
 * Date: 2019/02/12
 * Time: 13:35
 */


class backup extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * PDO のインスタンス
     * 関数 getConnection にて生成される
     * 一度生成されると、後続のテストでは生成されない
     * @var null|object
     */
    static private $pdo = null;

    /**
     * PHPUnit_Extensions_Database_DB_IDatabaseConnection のインスタンス
     * getConnection にて生成される。
     * 一度生成されると、後続のテストでは生成されない
     * @var null|object
     */
    private $conn = null;

    /**
     * 関数 getSetUpOperation
     *
     * PHPUnitのメソッドのオーバーライド
     *
     * Databaseを構築する際のSQLにCASUCADEをつけるための処理
     * ※この設定がないと、外部キーが設定されているDatabaseの構築時にエラーがでる
     *
     * Returns the database operation executed in test setup.
     *
     * 参考URL {@https://github.com/sebastianbergmann/dbunit/issues/37#issuecomment-142094486}
     *
     * @return PHPUnit_Extensions_Database_Operation_DatabaseOperation
     */
    protected function getSetUpOperation()
    {
        return PHPUnit_Extensions_Database_Operation_Factory::CLEAN_INSERT(true);
    }

    /**
     * 各テスト終了時に行う処理
     */
    protected function tearDown()
    {
        // PloErrorの各エラーメッセージ、フラグをリセットする
        resetPloError();
    }

    /**
     * 関数 getTearDownOperation
     *
     * テスト終了時に実行される処理
     * file_mstのトリガーを再開させる
     * @return mixed
     */
    protected function getTearDownOperation()
    {
        self::$pdo->prepare("ALTER TABLE user_mst ENABLE TRIGGER license_trigger;")->execute();
        return PHPUnit_Extensions_Database_Operation_Factory::NONE();
    }

    /**
     * 関数 getConnection
     * Databaseテストのフィクスチャ (通常はSetUpを利用する）
     * 公式ドキュメント
     * {@https://phpunit.de/manual/4.8/ja/database.html#database.the-four-stages-of-a-database-test}
     *
     * @return null|object
     * @throws Zend_Config_Exception
     */
    public function getConnection()
    {
        // DBとのコネクション 一度接続後は使いまわす
        if ($this->conn === null) {
            if (self::$pdo == null) {
                self::$pdo = new PDO(DATABASE_DSN, DATABASE_USER_NAME, DATABASE_PASSWORD);
            }
            $this->conn = $this->createDefaultDBConnection(self::$pdo, DATABASE_NAME);
        }
        // トリガーの一時停止
        self::$pdo->prepare("ALTER TABLE user_mst DISABLE TRIGGER license_trigger;")->execute();

        // PloErrorの宣言
        new PloError();
        return $this->conn;
    }

    /**
     * 関数 getDataSet
     * テスト用にデータベースの初期状態のセット
     * @return mixed
     */
    public function getDataSet()
    {
        return $this->createArrayDataSet(
            [
                "user_mst" => [
                    [
                        "user_id" => "000001",
                        "login_code" => "admin",
                        "password" => "8d9548f95b0a4e77a1bb8cb047da8045c76a75047613edf48f52487d08ade5eb",
                        "user_name" => "システム管理者",
                        "user_kana" => "システムカンリシャ",
                        "mail" => "plott_dummy@example.com",
                        "ldap_id" => null,
                        "last_login_date" => "2019-02-12 09:04:26",
                        "password_change_date" => "2019-01-09 13:42:33",
                        "has_license" => 1,
                        "is_locked" => 0,
                        "onetime_password_url" => "                                                                ",
                        "onetime_password_time" => null,
                        "is_host_company" => 1,
                        "company_name" => "システム管理企業",
                        "send_inviting_mail" => 1,
                        "is_revoked" => 0,
                        "login_mistake_count" => 0,
                        "regist_user_id" => "000001",
                        "update_user_id" => "      ",
                        "regist_date" => "2019-01-09 13:42:33",
                        "update_date" => "2019-02-12 09:04:25"

                    ],
                ],
                "user_license_rec" => [
                    [
                        "user_id" => "000001",
                        "user_license_id" => "0001",
                        "mac_addr" => 'AB:CD:EF:HI:12:34',
                        "host_name" => 'MSDN',
                        "os_version" => 'Windows 10',
                        "os_user" => 'MSDN-PC',
                        "regist_user_id" => "000001",
                        "update_user_id" => "000001",
                        "regist_date" => "2019-02-08 22:17:09",
                        "update_date" => "2019-02-12 09:06:28"
                    ],
                    [
                        "user_id" => "000001",
                        "user_license_id" => "0002",
                        "mac_addr" => 'AA:AA:AA:AA:AA:AA',
                        "host_name" => 'Plott',
                        "os_version" => 'Windows 7',
                        "os_user" => 'Plott-PC',
                        "regist_user_id" => "000001",
                        "update_user_id" => "000001",
                        "regist_date" => "2019-02-08 22:17:09",
                        "update_date" => "2019-02-12 09:06:28"
                    ],
                ]
            ]);
    }


    /**
     * @dataProvider providerTestExecution
     */
    public function testExecution($user_license_code, $expected_flag, $expected_db)
    {
        $test_object = new PloService_License_Delete_Strategy_Physical($user_license_code);
        $this->assertEquals($expected_flag, $test_object->execution());

        $query_table = $this->getConnection()->createQueryTable(
            "user_license_rec",
            "SELECT 
              user_id, user_license_id, mac_addr, host_name, os_version, os_user
            FROM user_license_rec ORDER BY user_license_id"
        );
        $expected_table = $this->createArrayDataSet(["user_license_rec" => $expected_db])->getTable("user_license_rec");
        $this->assertTablesEqual($query_table, $expected_table);

    }

    public function providerTestExecution()
    {
        return [
            [
                // user_license_code
                "000001*0003",
                // 返り値
                false,
                // データベース用の返り値
                [
                    [
                        "user_id" => "000001",
                        "user_license_id" => "0001",
                        "mac_addr" => 'AB:CD:EF:HI:12:34',
                        "host_name" => 'MSDN',
                        "os_version" => 'Windows 10',
                        "os_user" => 'MSDN-PC',
                    ],
                    [
                        "user_id" => "000001",
                        "user_license_id" => "0002",
                        "mac_addr" => 'AA:AA:AA:AA:AA:AA',
                        "host_name" => 'Plott',
                        "os_version" => 'Windows 7',
                        "os_user" => 'Plott-PC',
                    ],

                ]
            ],
            [
                // user_license_code
                "000001*0001",
                // 返り値
                true,
                // データベース用の返り値
                [
                    [
                        "user_id" => "000001",
                        "user_license_id" => "0002",
                        "mac_addr" => 'AA:AA:AA:AA:AA:AA',
                        "host_name" => 'Plott',
                        "os_version" => 'Windows 7',
                        "os_user" => 'Plott-PC',
                    ],

                ]
            ]
        ];
    }
}
